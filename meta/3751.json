{"type":"javascript","name":"荟萃浏览器接口模拟 for X","version":"1","tags":["工具脚本"],"extra":{"xMetaComment":"// @run-at document-start\n// @type bookmarklet"},"synopsis":"模拟荟萃浏览器接口，以便 X 浏览器 安装和使用用于荟萃浏览器的脚本。","detail":"<p><strong>仅适用于 X 浏览器</strong></p><p><br></p><p>这个脚本模拟荟萃浏览器的接口，以便 X 浏览器可以安装并使用荟萃浏览器的脚本。</p><p><br></p><p><em>即使不安装它，也可以通过在 </em><a rel=\"noopener noreferrer\" href=\"http://uujian.cn/webapp/store/index.html\"><em>荟萃浏览器共享插件</em></a><em> </em></p><p><em>复制荟萃脚本的代码来安装荟萃的脚本。</em></p><p><em>它仅提供非常小的兼容能力。</em></p><p><br></p><p>对于 X 浏览器, 当前支持模拟的接口有 :</p><p><br></p><pre spellcheck=\"false\" class=\"ql-syntax\">meta.openWindow\n</pre><p><em>在新窗口打开指定网址</em></p><p>使用 mbrowser.openUrlOnNewTab()。</p><p><br></p><pre spellcheck=\"false\" class=\"ql-syntax\">meta.loadUrl\n</pre><p><em>加载指定网址</em></p><p>使用 mbrowser.openUrl()，返回不重载。</p><p>由于 meta.loadUrl 选项可设置加载时使用的 请求头 和 UA, </p><p>X 无法实现，忽略选项参数。</p><p><br></p><pre spellcheck=\"false\" class=\"ql-syntax\">meta.copy\n</pre><p>复制指定文字</p><p>使用 mbrowser.copyToClipboard()。</p><p><br></p><pre spellcheck=\"false\" class=\"ql-syntax\">meta.toast\n</pre><p><em>弹出 Toast</em></p><p>荟萃的 toast 可设置显示时间，可加个按钮，</p><p>可设置点击按钮执行回调脚本。</p><p>这里使用 div 和 CSS 建立 toast 。</p><p><br></p><pre spellcheck=\"false\" class=\"ql-syntax\">meta.putAdbRule\n</pre><p><em>添加广告标记规则</em></p><p>调用 mbrowser.addAdBlockRule() 按类型 0 添加规则。</p><p><br></p><pre spellcheck=\"false\" class=\"ql-syntax\">meta.getManifestArray\n</pre><p><em>上报用户已安装的脚本清单数组</em></p><p>安装时会使用特定前缀 <strong>6d657461466f725820*#############</strong> </p><p>( * 为正负位 ，# 为填充 0 的 荟萃插件编号 ) 来标记荟萃脚本 。</p><p>其它脚本 ID 前缀不同，不会上报。</p><p>对于手动添加的脚本，X 浏览器的脚本 ID 是随机生成的。</p><p>只要前缀碰巧对上了，就会被认为是荟萃脚本，<strong>从而干扰上报功能</strong>。</p><p>除了 ID 以外，还会上报脚本名和介绍。</p><p><br></p><pre spellcheck=\"false\" class=\"ql-syntax\">meta.putWebApp\n</pre><p><em>安装脚本和小程序</em></p><p>参数是指向 JSON 文件的 URL 。将会获取并解析 JSON 安装脚本。</p><p><strong>只支持单个的 JS，不支持荟萃小程序。</strong></p><p>由于获取是异步进行的，所以总是最先返回安装成功，</p><p>如果 X 浏览器弹出脚本界面，而且里面有要安装的脚本，才算安装成功。</p><p><br></p><pre spellcheck=\"false\" class=\"ql-syntax\">meta.removeWebApp\n</pre><p><em>删除脚本和小程序</em></p><p>调用 mbrowser.uninstallScript() 卸载脚本。</p><p><br></p><pre spellcheck=\"false\" class=\"ql-syntax\">meta.getInfo\n</pre><p><em>获取浏览器信息</em></p><p>使用 <a rel=\"noopener noreferrer\" href=\"http://uujian.cn/webapp/store/js/meta.js\">荟萃的函数库</a> 提供的空模版。</p><p><br></p><p>注意事项：</p><p><br></p><ol><li><strong>由于各种原因，不保证安装的脚本一定可用</strong>。</li><li>由于荟萃浏览器接口太多了 (160+)，不可能实现所有接口，<strong>因此肯定会有脚本有兼容问题</strong>。</li><li>X 和荟萃的夜间模式是不同的，<strong>所以依赖夜间模式的脚本不会生效</strong>。</li><li>由于 X 浏览器脚本界面加载问题。安装脚本返回以后，状态会不正确，需要刷新网页才能重新上报得到删除按钮。</li><li>荟萃的插件使用 UTF-8 编码，但 X 浏览器不支持。尽管这边实现了编码转换，然而判断方法<strong>并不可靠</strong>。所以，如果脚本里有特殊字符，<strong>仍然可能会导致乱码、无法使用的情况</strong>。</li><li>此脚本不支持低于 WebView 47 的系统内核。</li></ol><p><br></p>","source":"import { toast } from '@bext/ui';\n\nwindow.meta = {\n    id: \"6d657461466f725820##############\",\n    toXID: function (id) {\n        let sign = (parseInt(id) < 0) ? '1' : '0';\n        while (id.length !== 13) id = '0' + id;\n        return this.id.replace('##############', sign + id);\n    },\n    parseSignedId: i => {\n        return (i.slice(0, 1) == '1') ? 0 - parseInt(i.slice(1)) : parseInt(i.slice(1));\n    },\n    convString: function (str) {\n        let u = false, u2s = str => {\n            var ab = new Uint8Array(str.length),\n                td = new TextDecoder();\n            for (let i = 0; i < str.length; ++i) {\n                ab[i] = str.charCodeAt(i);\n            }\n            return td.decode(ab);\n        };\n        for (let i = 0; i < str.length; ++i) {\n            if (str.charCodeAt(i) >= 228 && str.charCodeAt(i) <= 233) u = true;\n        }\n        return (u) ? u2s(str) : str;\n    },\n    copy: s => window.mbrowser.copyToClipboard(s),\n    loadUrl: (u, o) => window.mbrowser.openUrl(u, 0, true),\n    openWindow: u => window.mbrowser.openUrlOnNewTab(u, 0),\n    toast: (t, s, c) => {\n        let btn = {};\n        if (c && typeof c == 'object') {\n            btn.text = c.text;\n            btn.onclick = c.callback;\n        }\n        toast(t, s, btn);\n    },\n    getInfo: () => {\n        return JSON.stringify({\n            imei: \"0\",\n            userName: \"0\",\n            deadline: 0,\n            sdkVersion: 28,\n            versionCode: 92,\n            versionName: \"2.7.4\",\n            installTime: 0,\n            packageName: \"cn.uujian.browser\",\n            exp: 6,\n            point: 10\n        });\n    },\n    getManifestArray: () => {\n        let list = [];\n        JSON.parse(window.mbrowser.getUserScriptListByJson()).forEach(j => {\n            if (j.script_id.slice(0, 18) === meta.id.slice(0, 18)) {\n                list.push({\n                    id: meta.parseSignedId(j.script_id.slice(18)),\n                    type: 1, home: '', version: 0, host: '', author: '', icon: '',\n                    name: j.title, brief: j.script_desc\n                });\n            }\n        });\n        return JSON.stringify(list);\n    },\n    removeWebApp: function (id) {\n        if (window.mbrowser.getUserScriptByJson(this.toXID(id)) !== '{}') {\n            window.mbrowser.uninstallScript(this.toXID(id));\n        }\n    },\n    putWebApp: u => {\n        fetch(u).then(r => r.json()).then(d => {\n            let ia = d.array[0];\n            if (ia.html.length == 0 && ia.js.length == 1) {\n                window.mbrowser.addNewScript(JSON.stringify({\n                    resource_id: meta.toXID(ia.manifest.id),\n                    title: ia.manifest.name,\n                    description: ia.manifest.brief,\n                    nick_name: ia.manifest.author,\n                    content: meta.convString(atob(ia.res[0].data))\n                }));\n            } else window.mbrowser.showToast('不支持小程序');\n        });\n        return true;\n    },\n    putAdbRule: (r, h) => window.mbrowser.addAdBlockRule(r, location.host, h, 0)\n}"}
{"name":"示例脚本","version":"7","tags":["测试"],"synopsis":"这里显示示例脚本的简介，限制在 70 字以内。","detail":"<h1>这里是示例脚本的详情</h1><h2>二级标题</h2><p class=\"ql-align-center\">中间对齐</p><p><strong>粗体 </strong><em>斜体 </em><u>下划线</u><s> 删除线 </s></p><blockquote>引用</blockquote><pre spellcheck=\"false\" class=\"ql-syntax\">console.log('hello world');\n</pre><ol><li>列表1</li><li>列表2</li><li>列表3</li><li>列表4</li></ol><p><br></p><p><br></p><p><span style=\"color: rgb(136, 136, 136);\">小灰</span><span style=\"color: rgb(0, 102, 204);\"> 小蓝 </span></p><p><br></p>","type":"javascript","source":"import { name, id, version } from '@bext/context';\nimport { runOnce, addElement, loadScript, addStyle, checkUpdate } from '@bext/util';\nimport { alook_install, via_install, buildMethods } from '@bext/browser';\n// 取到当前的配置选项\nimport config from '@bext/config';\n\n\n// 导入远程文件到脚本中，将会增加最终脚本的体积，可以直接使用 $('xxx') 无需加载。\n// import 'https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js';\n\n// 导入一个 esm\nimport { html, render } from 'https://cdn.jsdelivr.net/npm/htm@3.1.0/preact/standalone.mjs';\n\nrunOnce(() => {\n    console.log(config);\n    \n    // 使用 preact + htm 来快速实现 ui\n    const App = () => html`<div> test app </div>`;\n    render(html`<${App} />`, addElement({\n        tag: 'div',\n        attrs: { id: 'rootContainer' },\n        to: document.body\n    }));\n\n    console.log('这里将只会被执行一次');\n    console.log(`当前的脚本名称：${name}，ID：${id}，版本：${version}`);\n\n    // 向 body 中添加一个元素\n    const el = addElement({\n        tag: 'div',\n        attrs: { id: 'myDiv' },\n        to: document.body\n    });\n\n    // 加载远程脚本，内部通过插入 script 标签实现，需要在加载成功之后才可以使用 $('xxx')\n    loadScript('https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js')\n        .then(() => console.log('加载成功！'))\n        .catch(() => console.log('加载失败'));\n\n    // 向 head 添加一个 css 样式\n    addStyle(`\n        #ad {\n            display: none;\n        }\n    `);\n\n    // 以7天为间隔检查脚本更新\n    checkUpdate(7).then((url) => {\n        if (url && confirm('当前脚本有更新，是否前往更新')) {\n            window.open(url);\n        }\n    });\n\n    const browser = buildMethods({ alook_install, via_install });\n    // 给 alook, via 安装一个脚本\n    browser('install', {/* xxx */ });\n});\n","configSchema":{"type":"object","title":"title","properties":{"field_1":{"type":"string","title":"可选字符串"},"field_2":{"type":"string","title":"字符串"},"field_3":{"type":"number","title":"数字"},"field_4":{"type":"array","items":{"type":"number","title":"元素"},"title":"数字数组"},"field_5":{"type":"boolean","title":"布尔"},"field_6":{"type":"integer","title":"整数"}},"required":["field_2","field_3","field_4","field_5","field_6"]},"defaultConfig":{"field_2":"zifuchuan","field_3":123,"field_4":[4353545,2],"field_5":false,"field_6":65464}}
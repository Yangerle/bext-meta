{"type":"javascript","name":"野径云俱黑，江船火独明","version":"1","synopsis":"黑魔法，真正夜间模式","tags":["美化脚本","工具脚本","阅读脚本"],"detail":"<p>搬运自 <a rel=\"noopener noreferrer\" href=\"http://via-app.cn/#/pluginDetail/19\">Via 轻插件</a> ，作者 <a rel=\"noopener noreferrer\" href=\"http://via-app.cn/#/user/2\">谷花泰</a></p><p>对原脚本进行如下修改 ：</p><ol><li>适配本站安装选项</li></ol><p>以下是原版介绍 ：</p><p><br></p><h1>野径云俱黑，江船火独明</h1><p><br></p><h2><span style=\"background-color: rgb(250, 204, 204);\"> </span> 简介</h2><p><br></p><p>外面下着小雨，今晚风微凉，我捧上手机，轻敲闲庭落花。</p><p>奈何屏幕辣眼睛，逐渐变瞎，辗转反侧，遂劈里啪啦作此插件。</p><p><br></p><h2><span style=\"background-color: rgb(250, 204, 204);\"> </span> 测试链接</h2><p><br></p><p><a style=\"color: rgb(240, 102, 102);\" rel=\"noopener noreferrer\" href=\"https://m.bilibili.com/\">测试地址</a></p>","source":"/*\n * @name: 野径云俱黑，江船火独明\n * @Author: 谷花泰\n * @version: 5.1\n * @description: 让你的网页随风潜入夜\n * @include: *\n * @createTime: 2019-10-19 01:09:24\n * @updateTime: 2019-10-20 02:36:48\n */\nimport config from '@bext/config';\n(function () {\n  /* 判断是否该执行 */\n  /* 网址黑名单制，遇到这些域名不执行 */\n  const blackList = config.blacklist;\n\n  const hostname = window.location.hostname;\n  const key = encodeURIComponent('谷花泰:野径云俱黑，江船火独明:执行判断');\n  const isBlack = blackList.some(keyword => {\n    if (hostname.match(keyword)) {\n      return true;\n    };\n    return false;\n  });\n\n  if (isBlack || window[key]) {\n    return;\n  };\n  window[key] = true;\n\n  /* 开始执行代码 */\n  class ChangeBackground {\n    constructor() {\n      this.init();\n    };\n    init() {\n      this.addStyle(`\n        html, body {\n          background-color: #000 !important;\n        }\n        * {\n          color: #CCD1D9 !important;\n          box-shadow: none !important;\n        }\n        *:after, *:before {\n          border-color: #1e1e1e !important;\n          color: #CCD1D9 !important;\n          box-shadow: none !important;\n          background-color: transparent !important;\n        }\n        a, a > *{\n          color: #409B9B !important;\n        }\n        [data-change-border-color][data-change-border-color-important] {\n          border-color: #1e1e1e !important;\n        }\n        [data-change-background-color][data-change-background-color-important] {\n          background-color: #000 !important;\n        }\n      `);\n      this.selectAllNodes(node => {\n        if (node.nodeType !== 1) {\n          return;\n        };\n        const style = window.getComputedStyle(node, null);\n        const whiteList = ['rgba(0, 0, 0, 0)', 'transparent'];\n        const backgroundColor = style.getPropertyValue('background-color');\n        const borderColor = style.getPropertyValue('border-color');\n        if (whiteList.indexOf(backgroundColor) < 0) {\n          if (this.isWhiteToBlack(backgroundColor)) {\n            node.dataset.changeBackgroundColor = '';\n            node.dataset.changeBackgroundColorImportant = '';\n          } else {\n            delete node.dataset.changeBackgroundColor;\n            delete node.dataset.changeBackgroundColorImportant;\n          };\n        };\n        if (whiteList.indexOf(borderColor) < 0) {\n          if (this.isWhiteToBlack(borderColor)) {\n            node.dataset.changeBorderColor = '';\n            node.dataset.changeBorderColorImportant = '';\n          } else {\n            delete node.dataset.changeBorderColor;\n            delete node.dataset.changeBorderColorImportant;\n          };\n        };\n        if (borderColor.indexOf('rgb(255, 255, 255)') >= 0) {\n          delete node.dataset.changeBorderColor;\n          delete node.dataset.changeBorderColorImportant;\n          node.style.borderColor = 'transparent';\n        };\n      });\n    };\n    addStyle(style = '') {\n      const styleElm = document.createElement('style');\n      styleElm.innerHTML = style;\n      document.head.appendChild(styleElm);\n    };\n    /* 是否为灰白黑 */\n    isWhiteToBlack(colorStr = '') {\n      let hasWhiteToBlack = false;\n      const colorArr = colorStr.match(/rgb.+?\\)/g);\n      if (!colorArr || colorArr.length === 0) {\n        return true;\n      };\n      colorArr.forEach(color => {\n        const reg = /rgb[a]*?\\(([0-9]+),.*?([0-9]+),.*?([0-9]+).*?\\)/g;\n        const result = reg.exec(color);\n        const red = result[1];\n        const green = result[2];\n        const blue = result[3];\n        const deviation = 20;\n        const max = Math.max(red, green, blue);\n        const min = Math.min(red, green, blue);\n        if (max - min <= deviation) {\n          hasWhiteToBlack = true;\n        };\n      });\n      return hasWhiteToBlack;\n    };\n    selectAllNodes(callback = () => { }) {\n      const allNodes = document.querySelectorAll('*');\n      Array.from(allNodes, node => {\n        callback(node);\n      });\n      this.observe({\n        targetNode: document.documentElement,\n        config: {\n          attributes: false\n        },\n        callback(mutations, observer) {\n          const allNodes = document.querySelectorAll('*');\n          Array.from(allNodes, node => {\n            callback(node);\n          });\n        }\n      });\n    };\n    observe({ targetNode, config = {}, callback = () => { } }) {\n      if (!targetNode) {\n        return;\n      };\n\n      config = Object.assign({\n        attributes: true,\n        childList: true,\n        subtree: true\n      }, config);\n\n      const observer = new MutationObserver(callback);\n      observer.observe(targetNode, config);\n    };\n  };\n  new ChangeBackground();\n})();","configSchema":{"type":"object","properties":{"blacklist":{"type":"array","items":{"type":"string"},"title":"域名黑名单"}},"required":[]},"defaultConfig":{"blacklist":["example.com"]}}
{"type":"javascript","name":"读取图片二维码","synopsis":"长按图片读取二维码","version":"1","tags":["工具脚本"],"source":"import 'https://unpkg.com/qrcode-reader@1.0.4/dist/index.js';\nimport { runOnce, runAt } from '@bext/util';\nimport { toast } from '@bext/ui'\nimport config from '@bext/config';\nrunOnce(() => {\n    let eimg, decoder = new QrCode(), obsImage = 0,\n        out = 0, scanned = false, obsCount = 0,\n        clearLong = () => {\n            clearTimeout(out), out = 0\n        }, toaster = (t, q) => {\n            (window.via && window.via.toast) ? window.via.toast(t) :\n            (window.mbrowser && window.mbrowser.showToast) ? window.mbrowser.showToast(t) :\n            (window._obj && window._obj.toast) ? window._obj.toast(t) :\n            (window.H5EXT && window.H5EXT.cmd) ? window.H5EXT.cmd(99, t) :\n            (window.meta && window.meta.toast) ? window.meta.toast(t, 3, null) :\n            (window.mx_browser_obj && window.mx_browser_obj.showtip) ? window.mx_browser_obj.showtip(t) :\n            (window.JSInterface && window.JSInterface.syslog) ? window.JSInterface.syslog(t) :\n            (window.plugin && window.plugin.makeToast) ? window.plugin.makeToast(t) :\n            (window.mdhtml && window.mdhtml.mdts) ? window.mdhtml.mdts(t) :\n            (q) ? console.log(t) : toast(t, 3);\n        }, scanner = img => {\n            img.addEventListener(\"touchstart\", e => {\n                eimg = e.target, text = '\\n', eurl = new URL(eimg.src), host = new URL(location),\n                    eso = (eurl.host === host.host && eurl.protocol === host.protocol && eurl.port === host.port),\n                    enh = (eurl.protocol !== 'https:' && eurl.protocol !== 'http:'),\n                    decoder.callback = (error,result) => {\n                        if (result) {\n                            alert(`识别成功!\\n${result.result}`);\n                        } else {\n                            toaster(\"解码失败\", false);\n                            console.error(error);\n                        }\n                    },\n                    out = setTimeout(() => {\n                        if (host.protocol == 'https:' && eso && 'BarcodeDetector' in window) {\n                            let barcodeDetector = new BarcodeDetector({ formats: config.识别类型 });\n                            barcodeDetector.detect(eimg).then(barcodes => {\n                                if (barcodes.length >= 1) {\n                                    barcodes.forEach(barcode => { text += `格式:${barcode.format}\\n内容:${barcode.rawValue}\\n\\n` });\n                                    alert(`识别成功!${text}`); text = '\\n';\n                                } else {\n                                    toaster(\"未识别到二维码\", false);\n                                }\n                            }, decoder.decode.bind(this, eimg.src));\n                        } else {\n                            if (eso || enh) {\n                                decoder.decode(eimg.src);\n                            } else {\n                                toaster(\"正在传输\", true);\n                                decoder.decode(config.代理服务器 + config.带协议 ? eimg.src : eimg.src.replace(/^\\w+\\:\\/\\//, ''));\n                            }\n                        }\n                    }, config.按住时间);\n            });\n            img.addEventListener(\"touchmove\", clearLong);\n            img.addEventListener(\"touchend\", clearLong);\n        }, observer = new MutationObserver((mus,obs) => {\n            for (let mu of mus) {\n                if (mu.addedNodes.length > 0) {\n                    mu.addedNodes.forEach(ad => {\n                        if (ad.nodeName === 'IMG' && obsImage < config.动态捕获上限) {\n                            scanner(ad); obsImage++;\n                        }\n                    });\n                    console.log(`动态加载 ${obsImage} 个图片`);\n                }\n            }\n            if (obsCount > config.动态捕获次数) obs.disconnect();\n            obsCount++;\n        }), scanAll = () => {\n            let i = 0;\n            if (!scanned) {\n                document.querySelectorAll(\"img\").forEach(function (img) {\n                    scanner(img); i++;\n                    console.log(`加载 ${i} 个图片`);\n                });\n                scanned = true;\n            }\n        };\n    runAt('document-idle',function() {\n        scanAll();\n        if (config.动态捕获) observer.observe(\n            document.documentElement,\n            { childList: true, subtree: true }\n        );\n    })\n})","configSchema":{"type":"object","properties":{"按住时间":{"type":"number","title":"按住时间","description":"按住图片触发时间","default":"","minimum":0},"动态捕获":{"type":"boolean","title":"动态捕获","description":"动态监视并捕获新增图片，配置比较低的设备不要打开"},"动态捕获次数":{"type":"number","title":"动态捕获次数","description":"动态监视变化的次数，超过次数停止监视页面。"},"动态捕获上限":{"type":"number","title":"动态捕获上限","description":"动态捕获图片个数","default":"","minimum":10,"maximum":200},"代理服务器":{"type":"string","title":"跨域代理服务器","description":"跨域获取图片使用的代理服务器","default":"","format":"uri"},"带协议":{"type":"boolean","title":"是否带协议","description":"代理服务器后接地址是否带协议头"},"识别类型":{"type":"array","items":{"type":"string","default":"","enum":["aztec","code_128","code_39","code_93","codabar","data_matrix","ean_13","ean_8","itf","pdf417","qr_code","upc_a","upc_e"],"enumDesc":""},"title":"识别类型","description":"barcodeDetector 支持的二维码类型，详见 https://developer.mozilla.org/en-US/docs/Web/API/Barcode_Detection_API#supported_barcode_formats","uniqueItems":true}},"required":["按住时间","动态捕获","动态捕获次数","动态捕获上限","代理服务器","带协议","识别类型"]},"defaultConfig":{"按住时间":500,"动态捕获":true,"动态捕获次数":1000,"动态捕获上限":100,"代理服务器":"https://netnr-proxy.azurewebsites.net/","带协议":false,"识别类型":["aztec","data_matrix","qr_code"]},"detail":"<p>这个脚本会在以下时机给页面上的图片设置事件 :</p><p><br></p><ol><li>页面加载完成 500 毫秒后。</li><li>(开启 <em>动态捕获 </em>) 页面动态生成新的图片时。</li></ol><p><br></p><p>事件是，当按住图片超过 <em>按住时间</em> 后，会执行以下行为：</p><p><br></p><p>如果 Webview 版本大于 83 ，</p><p>并且网站使用 https:// 协议，</p><p>并且 图片地址 与 网站 同域</p><p>( 同协议 并且 同域名 并且 同端口 )，</p><p>就会使用 <a rel=\"noopener noreferrer\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Barcode_Detection_API\">内核原生识别接口</a> 来识别多种二维码</p><p>( 默认开启 data_matrix aztec qr_code 三种) 。</p><p>支持包含多个二维码的图片。</p><p><br></p><p>如果不满足上面的条件，</p><p>但 图片地址 与 网站 同域，</p><p>则会调用内置解码器识别 QR 码，</p><p>不支持包含多个二维码的图片。</p><p><br></p><p>如果以上条件都不满足，</p><p>则会使用<a rel=\"noopener noreferrer\" href=\"https://github.com/netnr/proxy/blob/main/README_zh-CN.md\">来自 netnr-proxy 的代理服务器</a>传输图片，</p><p>然后调用内置解码器识别 QR 码，以便绕过 CORS 限制。</p><p>尽管速度很慢 ( 这边延迟 1.5 秒左右 ），但目前没有其他办法 。</p><p><br></p><p>识别成功的话，会以弹框显示结果。</p><p>失败则会弹出 Toast 提示。</p><p><br></p><p><em>如果你使用的浏览器不能复制弹框里的文字，</em></p><p><em>建议更换浏览器。对此问题我不打算解决。</em></p><p><br></p><p>如果你觉得 netnr 比较慢的话，可尝试以下配置：</p><blockquote><em>代理服务器 </em>改成 https://api.codetabs.com/v1/proxy/?quest=</blockquote><blockquote>并打开 <em>是否带协议</em></blockquote><p>来切换到 <a rel=\"noopener noreferrer\" href=\"https://codetabs.com/cors-proxy/cors-proxy.html\">来自 codetabs.com 的代理服务器</a></p><p><br></p><h3>注意事项：</h3><p><br></p><ol><li>开启 动态捕获 虽然会实时捕获新添加的图片，但耗费性能，<strong>老旧机器建议关闭它</strong>。</li><li>这个脚本不支持非 img 标签的图形 ( 例如 Canvas / SVG / CSS 渐变的 div 等等 ... )。</li><li>内置解码器很大概率不支持 动态 / 花式 二维码 ( 已经测试过几乎无法识别 使用 <a rel=\"noopener noreferrer\" href=\"https://www.bitcat.cc/webapp/awesome-qr/index.html\">Awesome QR</a> 创建的二维码 )。</li><li>由于脚本无法阻止图片长按菜单，所以长按图片出现菜单属于正常现象，不会影响脚本运行。不过相反，当你想使用菜单但不想识别的时候，它依然会执行识别，这很烦，但我没想到什么更好的办法，介意的不要使用。</li><li>如果你的浏览器带有有识别二维码的功能或插件，则不建议使用这个脚本。</li></ol><p><br></p><p>内置解码器来自 <a rel=\"noopener noreferrer\" href=\"https://www.npmjs.com/package/qrcode-reader\">qrcode-reader</a>。</p><p><br></p><p>这个脚本使用了 Bext 的函数库，</p><p>如需二次发布 ( 分享，搬运 等等 ) ，</p><p>需要在显著位置包含如下 MIT 许可文本:</p><pre spellcheck=\"false\" class=\"ql-syntax\">MIT License\nCopyright (c) 2022 ikkz\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</pre><p>这个脚本使用了 <a rel=\"noopener noreferrer\" href=\"https://www.npmjs.com/package/qrcode-reader\">qrcode-reader</a> ，</p><p>如需二次发布 ( 分享，搬运 等等 ) ，</p><p>需要在显著位置包含如下 Apache-2.0 许可声明:</p><pre spellcheck=\"false\" class=\"ql-syntax\">ZXing\n--------------------------\nCopyright 2007 ZXing authors , \nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\njsqrcode\n------------------------\nCopyright 2007 Lazar Laszlo , \nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</pre>"}
{"type":"javascript","name":"限制自动复制","version":"2","tags":["工具脚本"],"source":"import { runOnce, runAt } from '@bext/util';\nimport { getBextBar, toast } from '@bext/ui';\nimport config from '@bext/config';\n\nrunOnce(() => {\n    if (!navigator.clipboard) return;\n    \n    let origExecCmd = document.execCommand,\n        origClipWrite = navigator.clipboard.write,\n        origClipWriteText = navigator.clipboard.writeText,\n        copyCount = 0, copyStat = false, storKey = 'autoCopy_stat';\n\n    if (window.localStorage.hasOwnProperty(storKey)) {\n        if (config.storage) {\n            config.enable = (window.localStorage.getItem(storKey)==0) ? true : false;\n        } else {\n            window.localStorage.removeItem(storKey);\n        }\n    }\n    \n    function addCount() {\n        let bar = getBextBar();\n        copyCount++;\n        if (bar.query('autoCopy')) bar.change('autoCopy', {\n            text: `限制自动复制 (${copyCount})`,\n        });\n    }\n    function recordCopy(cmd,...arg){\n        if (cmd=='copy') {\n            addCount();\n        } else {\n            origExecCmd(cmd,...arg);\n        }\n    };\n    function recordCopyPromise(){\n        return new Promise(resolve => {\n            addCount();\n            resolve();\n        });\n    };\n    function lockCopy(lock){\n        document.execCommand = lock ? recordCopy : origExecCmd;\n        navigator.clipboard.write = lock ? recordCopyPromise : origClipWrite;\n        navigator.clipboard.writeText = lock ? recordCopyPromise : origClipWriteText;\n        copyStat = lock ? false : true;\n        copyCount = 0;\n        if (config.storage) window.localStorage.setItem(storKey,lock ? 0 : 1);\n    };\n    lockCopy(config.enable);\n    runAt('document-idle', function () {\n        let text = ['允许自动复制', '限制自动复制'];\n        getBextBar().add('autoCopy', {\n            text: (config.enable) ? text[1] : text[0],\n            textcolor: 'white',\n            backcolor: (config.enable) ? 'crimson' : 'limegreen',\n            callback: bar => {\n                if (copyStat) {\n                    bar.change('autoCopy', {\n                        text: text[1],\n                        backcolor: 'crimson'\n                    });\n                } else {\n                    bar.change('autoCopy', {\n                        text: text[0],\n                        backcolor: 'limegreen'\n                    });\n                }\n                lockCopy(copyStat);\n                toast(copyStat ? text[0] : text[1]);\n            },\n        });\n    })\n})","synopsis":"限制网站自动向剪贴板复制内容。","detail":"<p>启动后默认是开启限制的，</p><p>你可以点 按钮栏 上的开关 来允许自动复制。</p><p>脚本带有按域名记忆功能，自动记忆域名开关状态。</p><p><br></p><p>注意，这个脚本限制的只是使用 API 的自动复制。</p><p>对于那些 模拟 Ctrl + C 按键的自动复制无效。</p><p>对于你手动复制也是不会限制的。</p><p><br></p><p>这个脚本需要 WebView 66 以上内核才可使用，</p><p>且只能在 http:// 或 https:// 协议中使用。</p>","extra":{"xMetaComment":"// @run-at document-start"},"build":"(function () {\n  'use strict';\n\n  const id = decodeURIComponent('98778');\n\n  function runOnce(fn) {\n    const uniqId = 'BEXT_UNIQ_ID_' + id;\n    if (window[uniqId]) {\n      return;\n    }\n    window[uniqId] = true;\n    fn && fn();\n  }\n\n  \n  function runAt(start, fn, ...args) {\n    if (typeof fn !== 'function') return;\n    switch (start) {\n      case 'document-body':\n        document.addEventListener('readystatechange', function () {\n          if (document.readyState === 'interactive') fn.call(this, ...args);\n        });\n        break;\n      case 'document-end':\n        document.addEventListener('DOMContentLoaded', fn.bind(this, ...args));\n        break;\n      case 'document-idle':\n        window.addEventListener('load', fn.bind(this, ...args));\n        break;\n      default:\n        if (typeof start == 'number') {\n          setTimeout(fn, start, ...args);\n        } else {\n          window.addEventListener('load', function () {\n            setTimeout(fn, parseInt(start), ...args);\n          });\n        }\n    }\n  }\n\n  function addElement({ tag, attrs = {}, to = document.body }) {\n    const el = document.createElement(tag);\n    Object.assign(el, attrs);\n    to.appendChild(el);\n    return el;\n  }\n\n  function addStyle(css) {\n    return addElement({\n      tag: 'style',\n      attrs: {\n        textContent: css,\n      },\n      to: document.head,\n    });\n  }\n\n  \n  function getBextBar() {\n    if (!document.querySelector('#bextBar')) {\n      let enableFreeFeature = false,\n        bar,\n        buttons = [],\n        pos = [],\n        downPos = 0,\n        clickmove = 50,\n        first,\n        unlock = () => (document.onmousemove = null),\n        isObj = (o) =>\n          typeof o == 'object' && !(o instanceof Array || o instanceof Function),\n        optCheck = (opt, strict) => {\n          if (\n            !isObj(opt) ||\n            (!opt.backcolor && !opt.textcolor && !opt.text && !opt.callback)\n          )\n            return 2;\n          if (\n            (strict || opt.text) &&\n            (typeof opt.text !== 'string' || opt.text == '')\n          )\n            return 3;\n          if ((strict || opt.callback) && typeof opt.callback !== 'function')\n            return 4;\n          if (\n            opt.backcolor &&\n            (typeof opt.backcolor !== 'string' || opt.backcolor == '')\n          )\n            return 5;\n          if (\n            opt.textcolor &&\n            (typeof opt.textcolor !== 'string' || opt.textcolor == '')\n          )\n            return 6;\n          return 0;\n        };\n\n      addStyle(`\n        #bextBar {\n            position: fixed;\n            display: block;\n            max-width: 80vw;\n            height: max-content;\n            top: calc(95vh - 110px);\n            margin: 5px 0;\n            padding: 2px;\n            background: white;\n            border-radius: 5px;\n            opacity: 0.9;\n            z-index: 1000000;\n            box-shadow: 0 2px 5px gray;\n            user-select: none;\n            transition: left .125s, right .125s;\n        }\n        #bextBar.close {\n            width: 23px;\n            height: 33px;\n            overflow: hidden;\n        }\n        #bextBar.flip {\n            transform: rotateY(180deg);\n        }\n        #bextBarExpand {\n            margin: 10px;\n            margin-right: 0;\n            padding: 0;\n            border-width: 4px 0 0 4px;\n            border-color: #333 transparent transparent #333;\n            border-style: solid none none solid;\n            width: 10px;\n            height: 10px;\n            transform: rotate(315deg);\n            float: left;\n        }\n        #bextBar.close #bextBarExpand {\n            transform: rotate(135deg);\n            margin-left: 3px;\n        }\n        .bextButton {\n            margin: 7px 5px;\n            padding: 4px 8px;\n            background: whitesmoke;\n            color: #333;\n            border: none;\n            outline: none;\n            border-radius: 1em;\n            font-size: 13px;\n            line-height: 13px;\n            width: auto;\n            box-shadow: 0 2px 2px lightgray;\n            transition: opacity .5s, background-color .25s, color .25s;\n        }\n        .bextButton span {\n            margin: .125rem;\n            display: inline;\n        }\n        .delButton {\n            font-family: sans-serif;\n        }\n        .ghost {\n            opacity: 0.5;\n        }\n        #bextGhostBox {\n            position: fixed;\n            left: -150%;\n            top: -150%;\n            background: transparent;\n            z-index: 1000001;\n        }\n        #bextGhost {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: max-content;\n            opacity: 2;\n        }\n        @media (prefers-color-scheme: dark) {\n            #bextBar {\n                background: #283344;\n                box-shadow: 0 0 2px #3b81ff;\n            }\n            #bextBarExpand {\n                border-color: #3b81ff transparent transparent #3b81ff;\n            }\n            .bextButton {\n                background: #4c5161;\n                color: #ddf;\n                box-shadow: 0 0 5px #3b81ff;\n            }\n        }\n        `);\n      bar = addElement({\n        tag: 'div',\n        attrs: {\n          id: 'bextBar',\n          className: 'close',\n        },\n      });\n      first = addElement({\n        tag: 'div',\n        attrs: {\n          id: 'bextBarExpand',\n          onclick: function (e) {\n            if (\n              'ontouchend' in document ||\n              Math.abs(downPos - e.clientX * e.clientY) <= clickmove\n            )\n              bar.classList.toggle('close');\n          },\n        },\n        to: bar,\n      });\n\n      \n      if ('ontouchend' in document) {\n        first.addEventListener(\n          'touchstart',\n          function (e) {\n            pos = [\n              e.touches[0].clientX - bar.offsetLeft,\n              e.touches[0].clientY - bar.offsetTop,\n            ];\n          },\n          { passive: true },\n        );\n        first.addEventListener(\n          'touchmove',\n          function (e) {\n            bar.style.left =\n              Math.max(\n                0,\n                Math.min(e.touches[0].clientX - pos[0], window.innerWidth - 27),\n              ) + 'px';\n            bar.style.right = 'auto';\n            if (e.touches[0].clientX >= ( window.innerWidth / 2 )) {\n              bar.classList.add('flip');\n            } else {\n              bar.classList.remove('flip');\n            }\n            bar.style.top =\n              Math.max(\n                0,\n                Math.min(e.touches[0].clientY - pos[1], window.innerHeight - 37),\n              ) + 'px';\n          },\n          { passive: true },\n        );\n        first.addEventListener(\n          'touchend',\n          function (e) {\n            if (e.changedTouches[0].clientX >= ( window.innerWidth / 2 )) {\n              bar.style.left = 'auto';\n              bar.style.right = 0;\n              bar.classList.add('flip');\n            } else {\n              bar.style.left = 0;\n              bar.style.right = 'auto';\n              bar.classList.remove('flip');\n            }\n          },\n          { passive: true },\n        );\n      } else {\n        first.addEventListener('mousedown', function (e) {\n          pos = [\n            Math.max(0, e.clientX - bar.offsetLeft),\n            Math.max(0, e.clientY - bar.offsetTop),\n          ];\n          downPos = e.clientX * e.clientY;\n          document.onmousemove = function (e) {\n            if (Math.abs(downPos - e.clientX * e.clientY) > clickmove) {\n              bar.style.left =\n                Math.max(\n                  0,\n                  Math.min(e.clientX - pos[0], window.innerWidth - 27),\n                ) + 'px';\n              bar.style.top =\n                Math.max(\n                  0,\n                  Math.min(e.clientY - pos[1], window.innerHeight - 37),\n                ) + 'px';\n            }\n          };\n          document.removeEventListener('mouseup', unlock);\n          document.addEventListener('mouseup', unlock);\n        });\n      }\n\n      Object.assign(bar, {\n        queryAll: function () {\n          return buttons;\n        },\n        del: function (id) {\n          if (!buttons.includes(id)) return 1;\n          let button = this.querySelector(`#bextButton-${id}`);\n          if (button) button.remove();\n          buttons.splice(buttons.indexOf(id), 1);\n          return 0;\n        },\n        query: function (id) {\n          if (!buttons.includes(id)) return 1;\n          let button = this.querySelector(`#bextButton-${id}`);\n          if (!button) {\n            buttons.splice(buttons.indexOf(id), 1);\n            return 8;\n          }\n          return {\n            button: button,\n            text: button.querySelector('span').innerText,\n            backcolor: button.style.backgroundColor,\n            textcolor: button.style.color,\n          };\n        },\n        change: function (id, opt) {\n          if (!buttons.includes(id)) return 1;\n          let optret = optCheck(opt, false);\n          if (optret !== 0) return optret;\n          let button = this.querySelector(`#bextButton-${id}`);\n          if (button) {\n            if (opt.textcolor) button.style.color = opt.textcolor;\n            if (opt.backcolor) button.style.backgroundColor = opt.backcolor;\n            if (opt.text) button.querySelector('span').innerText = opt.text;\n            if (opt.callback)\n              button.addEventListener('click', opt.callback.bind(window, this, button));\n            return 0;\n          } else {\n            buttons.splice(buttons.indexOf(id), 1);\n            return 8;\n          }\n        },\n        add: function (id, opt) {\n          if (!id || !isObj(opt)) return 1;\n          opt = Object.assign(\n            {\n              text: '按钮',\n            },\n            opt,\n          );\n          if (typeof id !== 'string') return 7;\n          let optret = optCheck(opt, true);\n          if (optret !== 0) return optret;\n          if (!this.querySelector(`#bextButton-${id}`)) {\n            let button = addElement({\n                tag: 'button',\n                attrs: {\n                  id: `bextButton-${id}`,\n                  className: 'bextButton',\n                  draggable: enableFreeFeature,\n                },\n                to: this,\n              });\n            addElement({\n              tag: 'span',\n              to: button,\n            });\n            buttons.push(id);\n            button.addEventListener('click', function() {\n              bar.classList.add('close');\n            });\n            let change = this.change(id, opt);\n            if (change != 0) this.del(id);\n            return change;\n          } else return 10;\n        },\n      });\n    }\n    return document.querySelector('#bextBar');\n  }\n\n  \n  function toast(t, s = 3, c) {\n    let isObj = (o) =>\n      typeof o == 'object' && !(o instanceof Array || o instanceof Function);\n    if (typeof t != 'string' || t == '') return 1;\n    if (typeof s != 'number' || s < 1) return 2;\n    if (c && (!isObj(c) || (!c.text && !c.color && !c.onclick && !c.onclose)))\n      return 3;\n    if (c) {\n      if (c.text && (typeof c.text != 'string' || c.text == '')) return 4;\n      if (c.color && (typeof c.color != 'string' || c.color == '')) return 5;\n      if (c.onclick && typeof c.onclick !== 'function') return 6;\n      if (c.onclose && typeof c.onclose !== 'function') return 7;\n    }\n\n    addStyle(`\n  @-webkit-keyframes toast {\n    0% { opacity: 0%; }\n    20% { opacity: 100%; }\n    80% { opacity: 100%; }\n    100% { opacity: 0%; }\n  }\n  @keyframes toast {\n    0% { opacity: 0%; }\n    20% { opacity: 100%; }\n    80% { opacity: 100%; }\n    100% { opacity: 0%; }\n  }\n\n  #bextToast {\n    position: fixed;\n    left: 0;\n    right: 0;\n    bottom: 20vw;\n    width: max-content;\n    margin: 0 auto;\n    border-radius: 20px;\n    padding: .5rem 1rem;\n    font-size: 1rem;\n    background-color: rgba(0,0,0,0.5);\n    color: white;\n    text-align: center;\n    z-index: 1000000;\n    opacity: 0%;\n    animation: toast ${s}s ease;\n    -webkit-animation: toast ${s}s ease;\n  }\n    `);\n\n    let td = addElement({\n        tag: 'div',\n        attrs: {\n          id: 'bextToast',\n          innerHTML: t,\n        },\n      }),\n      tt = function () {\n        td.remove();\n        if (c && c.onclose) c.onclose.call(this);\n      };\n    td.addEventListener('animationend', tt);\n    if (c) {\n      let tc = addElement({\n        tag: 'span',\n        attrs: {\n          innerText: c.text,\n          onclick: c && c.onclick ? c.onclick : null,\n        },\n        to: td,\n      });\n      tc.style.paddingLeft = '.5rem';\n      tc.style.color = c && c.color ? c.color : 'turquoise';\n    }\n  }\n\n  var config = {\"enable\":true,\"storage\":true};\n\n  runOnce(() => {\n      if (!navigator.clipboard) return;\n      \n      let origExecCmd = document.execCommand,\n          origClipWrite = navigator.clipboard.write,\n          origClipWriteText = navigator.clipboard.writeText,\n          copyCount = 0, copyStat = false, storKey = 'autoCopy_stat';\n\n      if (window.localStorage.hasOwnProperty(storKey)) {\n          {\n              config.enable = (window.localStorage.getItem(storKey)==0) ? true : false;\n          }\n      }\n      \n      function addCount() {\n          let bar = getBextBar();\n          copyCount++;\n          if (bar.query('autoCopy')) bar.change('autoCopy', {\n              text: `限制自动复制 (${copyCount})`,\n          });\n      }\n      function recordCopy(cmd,...arg){\n          if (cmd=='copy') {\n              addCount();\n          } else {\n              origExecCmd(cmd,...arg);\n          }\n      }    function recordCopyPromise(){\n          return new Promise(resolve => {\n              addCount();\n              resolve();\n          });\n      }    function lockCopy(lock){\n          document.execCommand = lock ? recordCopy : origExecCmd;\n          navigator.clipboard.write = lock ? recordCopyPromise : origClipWrite;\n          navigator.clipboard.writeText = lock ? recordCopyPromise : origClipWriteText;\n          copyStat = lock ? false : true;\n          copyCount = 0;\n          window.localStorage.setItem(storKey,lock ? 0 : 1);\n      }    lockCopy(config.enable);\n      runAt('document-idle', function () {\n          let text = ['允许自动复制', '限制自动复制'];\n          getBextBar().add('autoCopy', {\n              text: (config.enable) ? text[1] : text[0],\n              textcolor: 'white',\n              backcolor: (config.enable) ? 'crimson' : 'limegreen',\n              callback: bar => {\n                  if (copyStat) {\n                      bar.change('autoCopy', {\n                          text: text[1],\n                          backcolor: 'crimson'\n                      });\n                  } else {\n                      bar.change('autoCopy', {\n                          text: text[0],\n                          backcolor: 'limegreen'\n                      });\n                  }\n                  lockCopy(copyStat);\n                  toast(copyStat ? text[0] : text[1]);\n              },\n          });\n      });\n  });\n\n})();\n","configSchema":{"type":"object","properties":{"enable":{"type":"boolean","title":"默认状态","description":"勾选代表默认限制自动复制。","default":false},"storage":{"type":"boolean","title":"记忆状态","description":"按网站域名记忆状态，新访问的网站将会是默认状态。","default":false}},"required":["enable","storage"]},"defaultConfig":{"enable":true,"storage":true}}